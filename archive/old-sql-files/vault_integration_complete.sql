-- üîÑ Migra√ß√£o: Integra√ß√£o Completa do Vault com Sistema de Equipe
-- Esta migra√ß√£o remove a depend√™ncia da tabela user_permissions e garante 
-- que o vault use diretamente os roles da tabela profiles

-- ===== VERIFICA√á√ÉO DE SEGURAN√áA =====
DO $$
BEGIN
    -- Verificar se existem senhas importantes no vault antes de alterar a estrutura
    IF EXISTS (SELECT 1 FROM vault_items WHERE visibility_level != 'personal') THEN
        RAISE NOTICE '‚ö†Ô∏è  ATEN√á√ÉO: Existem senhas compartilhadas no vault. Execute apenas se souber o que est√° fazendo.';
    END IF;
    
    -- Verificar se a tabela profiles tem todos os usu√°rios necess√°rios
    IF EXISTS (SELECT 1 FROM auth.users WHERE id NOT IN (SELECT id FROM profiles)) THEN
        RAISE EXCEPTION '‚ùå ERRO: Nem todos os usu√°rios do auth.users t√™m perfil na tabela profiles. Execute primeiro a migra√ß√£o de perfis.';
    END IF;
END $$;

-- ===== BACKUP DE DADOS (OPCIONAL) =====
-- Criar backup da estrutura atual caso algo d√™ errado
CREATE TABLE IF NOT EXISTS vault_items_backup AS 
SELECT * FROM vault_items WHERE 1=0; -- Estrutura vazia para backup

-- ===== LIMPEZA DE TABELAS DESNECESS√ÅRIAS =====
-- Remover tabela user_permissions se existir
DROP TABLE IF EXISTS user_permissions CASCADE;

-- Remover outras tabelas relacionadas ao sistema antigo se existirem
DROP TABLE IF EXISTS vault_sessions CASCADE;
DROP TABLE IF EXISTS vault_access_logs CASCADE;

-- ===== ATUALIZA√á√ÉO DE POL√çTICAS RLS =====
-- Remover pol√≠ticas antigas que dependiam de user_permissions
DROP POLICY IF EXISTS "vault_items_select_policy" ON vault_items;
DROP POLICY IF EXISTS "vault_items_insert_policy" ON vault_items;
DROP POLICY IF EXISTS "vault_items_update_policy" ON vault_items;
DROP POLICY IF EXISTS "vault_items_delete_policy" ON vault_items;

-- Criar novas pol√≠ticas baseadas no sistema de profiles
-- 1. Select: usu√°rio pode ver pr√≥prios items + items compartilhados baseado no role
CREATE POLICY "vault_items_select_policy" ON vault_items
    FOR SELECT USING (
        -- Pr√≥prios items
        user_id = auth.uid()
        OR
        -- Items compartilhados baseado no visibility_level e role do usu√°rio
        (
            visibility_level = 'admin' AND 
            EXISTS (SELECT 1 FROM profiles WHERE id = auth.uid() AND role = 'admin')
        )
        OR
        (
            visibility_level = 'manager' AND 
            EXISTS (SELECT 1 FROM profiles WHERE id = auth.uid() AND role IN ('admin', 'gestor_trafego'))
        )
        OR
        (
            visibility_level = 'team' AND 
            created_by_department = (SELECT 
                CASE 
                    WHEN role = 'admin' THEN 'administrador'::user_department
                    WHEN role = 'editor' THEN 'editor'::user_department
                    WHEN role = 'copywriter' THEN 'copywriter'::user_department
                    WHEN role = 'gestor_trafego' THEN 'gestor'::user_department
                    WHEN role = 'minerador' THEN 'minerador'::user_department
                    ELSE 'particular'::user_department
                END
                FROM profiles WHERE id = auth.uid()
            )
        )
        OR
        (
            visibility_level = 'custom' AND 
            (SELECT 
                CASE 
                    WHEN role = 'admin' THEN 'administrador'::user_department
                    WHEN role = 'editor' THEN 'editor'::user_department
                    WHEN role = 'copywriter' THEN 'copywriter'::user_department
                    WHEN role = 'gestor_trafego' THEN 'gestor'::user_department
                    WHEN role = 'minerador' THEN 'minerador'::user_department
                    ELSE 'particular'::user_department
                END
                FROM profiles WHERE id = auth.uid()
            ) = ANY(allowed_departments)
        )
    );

-- 2. Insert: usu√°rio pode criar items
CREATE POLICY "vault_items_insert_policy" ON vault_items
    FOR INSERT WITH CHECK (
        user_id = auth.uid()
    );

-- 3. Update: usu√°rio pode atualizar pr√≥prios items OU admin pode atualizar qualquer um
CREATE POLICY "vault_items_update_policy" ON vault_items
    FOR UPDATE USING (
        user_id = auth.uid()
        OR 
        EXISTS (SELECT 1 FROM profiles WHERE id = auth.uid() AND role = 'admin')
    );

-- 4. Delete: usu√°rio pode deletar pr√≥prios items OU admin pode deletar qualquer um
CREATE POLICY "vault_items_delete_policy" ON vault_items
    FOR DELETE USING (
        user_id = auth.uid()
        OR 
        EXISTS (SELECT 1 FROM profiles WHERE id = auth.uid() AND role = 'admin')
    );

-- ===== ATUALIZA√á√ÉO DE DADOS EXISTENTES =====
-- Garantir que todos os items tenham um departamento criador v√°lido
UPDATE vault_items 
SET created_by_department = COALESCE(
    (SELECT 
        CASE 
            WHEN p.role = 'admin' THEN 'administrador'::user_department
            WHEN p.role = 'editor' THEN 'editor'::user_department
            WHEN p.role = 'copywriter' THEN 'copywriter'::user_department
            WHEN p.role = 'gestor_trafego' THEN 'gestor'::user_department
            WHEN p.role = 'minerador' THEN 'minerador'::user_department
            ELSE 'particular'::user_department
        END
     FROM profiles p WHERE p.id = vault_items.user_id),
    'particular'::user_department
)
WHERE created_by_department IS NULL OR created_by_department = '';

-- ===== LIMPEZA DE APIS DESNECESS√ÅRIAS =====
-- Coment√°rio para lembrar de remover arquivos:
-- - /app/api/vault/permissions/ (n√£o √© mais necess√°rio)

-- ===== VERIFICA√á√ïES FINAIS =====
DO $$
DECLARE
    vault_count INTEGER;
    profile_count INTEGER;
BEGIN
    -- Contar items no vault
    SELECT COUNT(*) INTO vault_count FROM vault_items;
    
    -- Contar perfis
    SELECT COUNT(*) INTO profile_count FROM profiles;
    
    -- Resultados
    RAISE NOTICE '‚úÖ Migra√ß√£o conclu√≠da com sucesso!';
    RAISE NOTICE 'üìä Total de items no vault: %', vault_count;
    RAISE NOTICE 'üë• Total de perfis de usu√°rio: %', profile_count;
    RAISE NOTICE 'üîê Sistema agora integrado com tabela profiles';
    RAISE NOTICE 'üóëÔ∏è  Tabela user_permissions removida';
    RAISE NOTICE 'üõ°Ô∏è  Pol√≠ticas RLS atualizadas para usar roles da equipe';
END $$;

-- ===== INSTRU√á√ïES P√ìS-MIGRA√á√ÉO =====
/*
üéØ PR√ìXIMOS PASSOS:

1. ‚úÖ Testar o vault no navegador
2. ‚úÖ Verificar se as permiss√µes funcionam corretamente
3. ‚úÖ Confirmar que usu√°rios de diferentes departamentos veem apenas o que devem
4. üóëÔ∏è  Remover arquivo /app/api/vault/permissions/route.ts (n√£o √© mais necess√°rio)
5. üîÑ Fazer deploy das mudan√ßas

üìã PARA TESTAR:

1. Fa√ßa login como admin ‚Üí deve ver todas as senhas
2. Fa√ßa login como editor ‚Üí deve ver apenas senhas do departamento editor + pessoais
3. Crie senha com visibilidade "custom" ‚Üí deve permitir selecionar departamentos espec√≠ficos
4. Verifique se o debug no vault mostra: role, department e permiss√µes corretas

‚ö†Ô∏è PROBLEMAS CONHECIDOS:

- Se ainda aparecer erro de "perfil n√£o encontrado", verifique se todos os usu√°rios em auth.users t√™m entrada correspondente em profiles
- Se as permiss√µes n√£o funcionarem, verifique se os roles em profiles est√£o corretos: 'admin', 'editor', 'copywriter', 'gestor_trafego', 'minerador'

üéâ BENEF√çCIOS DESTA INTEGRA√á√ÉO:

‚úÖ Sistema unificado: vault usa diretamente os roles da equipe
‚úÖ Menos duplica√ß√£o de dados: sem tabela user_permissions separada  
‚úÖ Controle granular: cada senha pode ser compartilhada com departamentos espec√≠ficos
‚úÖ Administra√ß√£o simplificada: mudan√ßa de role na equipe afeta automaticamente o vault
‚úÖ Seguran√ßa mantida: RLS continua protegendo os dados corretamente
*/