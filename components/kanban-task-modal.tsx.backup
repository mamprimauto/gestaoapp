"use client"

import { useState, useEffect, useRef } from "react"
import { 
  Dialog, 
  DialogContent, 
  DialogHeader,
  DialogTitle,
  DialogDescription 
} from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import { 
  Calendar,
  Clock,
  User,
  Flag,
  CheckSquare,
  Plus,
  X,
  Edit3,
  Save,
  MessageCircle,
  Paperclip,
  Upload,
  Download,
  Trash2,
  MoreVertical
} from "lucide-react"
import { cn } from "@/lib/utils"
import { useTaskData } from "./task-data"
import { getSupabaseClient } from "@/lib/supabase/client"
import type { Workspace } from "@/app/tarefas/page"

interface KanbanTaskModalProps {
  task: any
  workspace: Workspace
  members: any[]
  isOpen: boolean
  onClose: () => void
}

const priorityColors = {
  low: "bg-blue-100 text-blue-700 border-blue-200",
  med: "bg-yellow-100 text-yellow-700 border-yellow-200", 
  high: "bg-red-100 text-red-700 border-red-200"
}

const priorityLabels = {
  low: "Baixa",
  med: "Média",
  high: "Alta"
}

const statusOptions = [
  { value: "todo", label: "A Fazer", color: "bg-gray-100 text-gray-700" },
  { value: "in-progress", label: "Em Progresso", color: "bg-blue-100 text-blue-700" },
  { value: "review", label: "Revisão", color: "bg-yellow-100 text-yellow-700" },
  { value: "done", label: "Concluído", color: "bg-green-100 text-green-700" }
]

export default function KanbanTaskModal({ task, workspace, members, isOpen, onClose }: KanbanTaskModalProps) {
  const { updateTask, addComment } = useTaskData()
  const [isEditingTitle, setIsEditingTitle] = useState(false)
  const [isEditingDescription, setIsEditingDescription] = useState(false)
  const [title, setTitle] = useState(task.title || "")
  const [description, setDescription] = useState("")
  const [newComment, setNewComment] = useState("")
  const [checklist, setChecklist] = useState<any[]>([])
  const [newChecklistItem, setNewChecklistItem] = useState("")
  const [isSubmittingComment, setIsSubmittingComment] = useState(false)
  const titleInputRef = useRef<HTMLInputElement>(null)
  const descInputRef = useRef<HTMLTextAreaElement>(null)

  // Parse task data
  useEffect(() => {
    if (task) {
      setTitle(task.title || "")
      
      let taskData: any = {}
      try {
        taskData = task.description ? JSON.parse(task.description) : {}
      } catch {
        taskData = {}
      }
      
      setDescription(taskData.description || "")
      setChecklist(taskData.checklist || [])
    }
  }, [task])

  useEffect(() => {
    if (isEditingTitle && titleInputRef.current) {
      titleInputRef.current.focus()
      titleInputRef.current.select()
    }
  }, [isEditingTitle])

  useEffect(() => {
    if (isEditingDescription && descInputRef.current) {
      descInputRef.current.focus()
    }
  }, [isEditingDescription])

  const assignee = task.assignee_id 
    ? members.find(m => m.id === task.assignee_id)
    : null

  const handleSaveTitle = async () => {
    if (title.trim() !== task.title) {
      await updateTask(task.id, { title: title.trim() })
    }
    setIsEditingTitle(false)
  }

  const handleSaveDescription = async () => {
    let taskData: any = {}
    try {
      taskData = task.description ? JSON.parse(task.description) : {}
    } catch {
      taskData = {}
    }
    
    taskData.description = description
    taskData.checklist = checklist
    
    await updateTask(task.id, { description: JSON.stringify(taskData) })
    setIsEditingDescription(false)
  }

  const handleStatusChange = async (newStatus: string) => {
    await updateTask(task.id, { status: newStatus })
  }

  const handlePriorityChange = async (newPriority: string) => {
    await updateTask(task.id, { priority: newPriority })
  }

  const handleAssigneeChange = async (newAssigneeId: string | null) => {
    await updateTask(task.id, { assignee_id: newAssigneeId })
  }

  const handleDueDateChange = async (newDueDate: string) => {
    await updateTask(task.id, { due_date: newDueDate })
  }

  const addChecklistItem = () => {
    if (newChecklistItem.trim()) {
      const newItem = {
        id: Date.now().toString(),
        text: newChecklistItem.trim(),
        completed: false
      }
      const updatedChecklist = [...checklist, newItem]
      setChecklist(updatedChecklist)
      setNewChecklistItem("")
      
      // Auto-save checklist
      let taskData: any = {}
      try {
        taskData = task.description ? JSON.parse(task.description) : {}
      } catch {
        taskData = {}
      }
      taskData.checklist = updatedChecklist
      updateTask(task.id, { description: JSON.stringify(taskData) })
    }
  }

  const toggleChecklistItem = (itemId: string) => {
    const updatedChecklist = checklist.map(item => 
      item.id === itemId ? { ...item, completed: !item.completed } : item
    )
    setChecklist(updatedChecklist)
    
    // Auto-save checklist
    let taskData: any = {}
    try {
      taskData = task.description ? JSON.parse(task.description) : {}
    } catch {
      taskData = {}
    }
    taskData.checklist = updatedChecklist
    updateTask(task.id, { description: JSON.stringify(taskData) })
  }

  const removeChecklistItem = (itemId: string) => {
    const updatedChecklist = checklist.filter(item => item.id !== itemId)
    setChecklist(updatedChecklist)
    
    // Auto-save checklist
    let taskData: any = {}
    try {
      taskData = task.description ? JSON.parse(task.description) : {}
    } catch {
      taskData = {}
    }
    taskData.checklist = updatedChecklist
    updateTask(task.id, { description: JSON.stringify(taskData) })
  }

  const handleAddComment = async () => {
    if (newComment.trim() && !isSubmittingComment) {
      setIsSubmittingComment(true)
      try {
        await addComment(task.id, newComment.trim())
        setNewComment("")
      } finally {
        setIsSubmittingComment(false)
      }
    }
  }

  const formatDate = (dateString: string) => {
    const date = new Date(dateString + 'T00:00:00')
    return date.toLocaleDateString('pt-BR')
  }

  const formatDateTime = (dateString: string) => {
    const date = new Date(dateString)
    return date.toLocaleString('pt-BR')
  }

  const isOverdue = task.due_date && new Date(task.due_date + 'T00:00:00') < new Date()
  const completedChecklistItems = checklist.filter(item => item.completed).length
  const checklistProgress = checklist.length > 0 ? (completedChecklistItems / checklist.length) * 100 : 0

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent 
        className="max-w-[95vw] sm:max-w-4xl md:max-w-5xl lg:max-w-6xl xl:max-w-7xl h-[90vh] bg-[#1C1C1E] text-[#F2F2F7] border border-[#2A2A2C] rounded-xl p-0 shadow-[0_20px_60px_-24px_rgba(0,0,0,0.6)] overflow-hidden flex flex-col"
        onOpenAutoFocus={(e) => e.preventDefault()}
      >
        {/* Header */}
        <div className="px-4 py-3 border-b border-[#2E2E30]">
          <DialogHeader>
            <DialogTitle className="text-[#F2F2F7] flex items-center gap-2 text-[15px]">
              <CheckSquare className="h-4 w-4 text-white/70" />
              Detalhes da Tarefa
            </DialogTitle>
            <DialogDescription className="text-white/65 text-[12px]">
              Gerencie todas as informações da sua tarefa e acompanhe o progresso.
            </DialogDescription>
          </DialogHeader>
        </div>

        {/* Main Content - Two Column Layout with Scroll */}
        <div className="flex-1 min-h-0 overflow-hidden">
          <div className="h-full overflow-y-auto scrollbar-thin scrollbar-track-[#1E1E20] scrollbar-thumb-[#3A3A3C] hover:scrollbar-thumb-[#4A4A4C]">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 lg:gap-6 p-3 lg:p-4 min-h-full">
              {/* Left Column - All Content */}
              <div className="space-y-4">
                {/* Basic Info - Title & Due Date */}
                <div className="bg-[#1E1E20] border border-[#2E2E30] rounded-lg p-3 mb-4 shadow-sm">
                  <div className="grid grid-cols-1 sm:grid-cols-[2fr_1fr] gap-3">
                    {/* Title - Takes 2/3 of the width */}
                    <div>
                      <div className="flex items-center gap-1.5 mb-2">
                        <CheckSquare className="h-3.5 w-3.5 text-[#7C8CF8]" />
                        <label className="text-[12px] font-medium text-white/90">Título da Tarefa</label>
                      </div>
                      {isEditingTitle ? (
                        <div className="flex items-center gap-2">
                          <Input
                            ref={titleInputRef}
                            value={title}
                            onChange={(e) => setTitle(e.target.value)}
                            className="bg-[#2A2A2C] border-[#3A3A3C] text-white placeholder:text-white/40 h-8 rounded-md"
                            onKeyDown={(e) => {
                              if (e.key === 'Enter') handleSaveTitle()
                              if (e.key === 'Escape') {
                                setTitle(task.title || "")
                                setIsEditingTitle(false)
                              }
                            }}
                          />
                          <Button size="sm" onClick={handleSaveTitle} className="h-8 px-2">
                            <Save className="h-3.5 w-3.5" />
                          </Button>
                          <Button 
                            size="sm" 
                            variant="ghost" 
                            onClick={() => {
                              setTitle(task.title || "")
                              setIsEditingTitle(false)
                            }}
                            className="h-8 px-2"
                          >
                            <X className="h-3.5 w-3.5" />
                          </Button>
                        </div>
                      ) : (
                        <div 
                          className="cursor-pointer hover:bg-[#2A2A2C] rounded-md p-2 -m-2 transition-colors"
                          onClick={() => setIsEditingTitle(true)}
                        >
                          <div className="text-[14px] font-medium text-white/90 flex items-center gap-2">
                            <span className="flex-1">{title}</span>
                            <Edit3 className="h-3.5 w-3.5 text-white/40" />
                          </div>
                        </div>
                      )}
                    </div>
                    
                    {/* Due Date - Takes 1/3 of the width */}
                    <div>
                      <div className="flex items-center gap-1.5 mb-2">
                        <Calendar className="h-3.5 w-3.5 text-[#FF9500]" />
                        <label className="text-[12px] font-medium text-white/90">Prazo</label>
                      </div>
                      <Input
                        type="date"
                        value={task.due_date || ""}
                        onChange={(e) => handleDueDateChange(e.target.value)}
                        className="bg-[#2A2A2C] border-[#3A3A3C] text-white placeholder:text-white/40 h-8 rounded-md"
                      />
                      {isOverdue && (
                        <p className="text-[10px] text-red-400 mt-1">Prazo vencido</p>
                      )}
                    </div>
                  </div>
                  
                  {/* Tags and Status Row */}
                  <div className="flex items-center gap-2 mt-3 pt-3 border-t border-[#2A2A2C]">
                    <Badge 
                      style={{ backgroundColor: workspace.color + '20', color: workspace.color, borderColor: workspace.color + '40' }}
                      className="text-[10px] px-2 py-1"
                    >
                      {workspace.icon} {workspace.name}
                    </Badge>
                    
                    {task.priority && (
                      <Badge 
                        className={cn("text-[10px] px-2 py-1 cursor-pointer", priorityColors[task.priority as keyof typeof priorityColors])}
                        onClick={() => {
                          const priorities = ['low', 'med', 'high']
                          const currentIndex = priorities.indexOf(task.priority)
                          const nextPriority = priorities[(currentIndex + 1) % priorities.length]
                          handlePriorityChange(nextPriority)
                        }}
                      >
                        <Flag className="h-3 w-3 mr-1" />
                        {priorityLabels[task.priority as keyof typeof priorityLabels]}
                      </Badge>
                    )}
                    
                    <select 
                      value={task.status || 'todo'}
                      onChange={(e) => handleStatusChange(e.target.value)}
                      className="text-[10px] px-2 py-1 rounded border bg-[#2A2A2C] border-[#3A3A3C] text-white"
                    >
                      {statusOptions.map(option => (
                        <option key={option.value} value={option.value}>
                          {option.label}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>

                {/* Description Section */}
                <div className="bg-[#1E1E20] border border-[#2E2E30] rounded-lg p-3 shadow-sm">
                  <div className="flex items-center gap-1.5 mb-3">
                    <Edit3 className="h-3.5 w-3.5 text-[#7C8CF8]" />
                    <label className="text-[12px] font-medium text-white/90">Descrição</label>
                  </div>
                  
                  {isEditingDescription ? (
                    <div className="space-y-3">
                      <Textarea
                        ref={descInputRef}
                        value={description}
                        onChange={(e) => setDescription(e.target.value)}
                        placeholder="Adicione uma descrição detalhada..."
                        className="bg-[#2A2A2C] border-[#3A3A3C] text-white placeholder:text-white/40 rounded-md text-sm min-h-[100px] resize-none"
                        rows={4}
                      />
                      <div className="flex gap-2">
                        <Button size="sm" onClick={handleSaveDescription} className="h-8 px-3">
                          <Save className="h-3.5 w-3.5 mr-1" />
                          Salvar
                        </Button>
                        <Button 
                          size="sm" 
                          variant="ghost"
                          onClick={() => {
                            let taskData: any = {}
                            try {
                              taskData = task.description ? JSON.parse(task.description) : {}
                            } catch {
                              taskData = {}
                            }
                            setDescription(taskData.description || "")
                            setIsEditingDescription(false)
                          }}
                          className="h-8 px-3"
                        >
                          Cancelar
                        </Button>
                      </div>
                    </div>
                  ) : (
                    <div 
                      className={cn(
                        "p-3 rounded-md cursor-pointer transition-colors min-h-[60px] flex items-start",
                        description 
                          ? "bg-[#2A2A2C] hover:bg-[#2E2E30] text-white/80" 
                          : "bg-[#2A2A2C] hover:bg-[#2E2E30] text-white/40 border-dashed border border-[#3A3A3C]"
                      )}
                      onClick={() => setIsEditingDescription(true)}
                    >
                      <span className="text-[13px]">
                        {description || "Clique para adicionar uma descrição..."}
                      </span>
                    </div>
                  )}
                </div>

                {/* Assignee Section */}
                <div className="bg-[#1E1E20] border border-[#2E2E30] rounded-lg p-3 shadow-sm">
                  <div className="flex items-center gap-1.5 mb-3">
                    <User className="h-3.5 w-3.5 text-[#FF9500]" />
                    <label className="text-[12px] font-medium text-white/90">Responsável</label>
                  </div>
                  
                  <div className="flex items-center gap-3">
                    {assignee ? (
                      <>
                        <Avatar className="h-8 w-8 border-2 border-[#3A3A3C]">
                          <AvatarImage src={assignee.avatar_url || "/minimal-avatar.png"} />
                          <AvatarFallback className="text-xs bg-[#2A2A2C] text-white/70">
                            {assignee.name ? assignee.name.charAt(0).toUpperCase() : 'U'}
                          </AvatarFallback>
                        </Avatar>
                        <div>
                          <div className="text-[13px] font-medium text-white/90">{assignee.name}</div>
                          <div className="text-[11px] text-white/60">{assignee.email}</div>
                        </div>
                      </>
                    ) : (
                      <div className="flex items-center gap-3 text-white/40">
                        <div className="h-8 w-8 rounded-full border-2 border-dashed border-[#3A3A3C] flex items-center justify-center">
                          <User className="h-4 w-4" />
                        </div>
                        <span className="text-[13px]">Não atribuído</span>
                      </div>
                    )}
                    
                    <select
                      value={assignee?.id || ''}
                      onChange={(e) => handleAssigneeChange(e.target.value || null)}
                      className="ml-auto text-[11px] px-2 py-1 rounded bg-[#2A2A2C] border-[#3A3A3C] text-white"
                    >
                      <option value="">Não atribuído</option>
                      {members.map(member => (
                        <option key={member.id} value={member.id}>
                          {member.name}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
              </div>

              {/* Right Column - Checklist and Comments */}
              <div className="lg:border-l lg:border-[#2E2E30] lg:pl-4 border-t border-[#2E2E30] pt-4 lg:border-t-0 lg:pt-0 space-y-4">
                
                {/* Checklist Section */}
                <div className="bg-[#1A1A1C] border border-[#2A2A2C] rounded-lg transition-all duration-300 hover:border-[#3A3A3C]">
                  {/* Sticky Header */}
                  <div className="sticky top-0 bg-[#1A1A1C] border-b border-[#2A2A2C] px-3 py-2 rounded-t-lg z-10">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <div className="w-1.5 h-1.5 bg-[#FF9F0A] rounded-full"></div>
                        <label className="text-[12px] font-medium text-white/90">Checklist</label>
                        <span className="text-[10px] text-white/50">({completedChecklistItems}/{checklist.length})</span>
                      </div>
                      
                      {checklist.length > 0 && (
                        <div className="text-[10px] text-white/60">
                          {Math.round(checklistProgress)}% concluído
                        </div>
                      )}
                    </div>
                    
                    {/* Progress Bar */}
                    {checklist.length > 0 && (
                      <div className="mt-2">
                        <div className="w-full bg-[#2A2A2C] rounded-full h-1.5 overflow-hidden">
                          <div 
                            className="bg-gradient-to-r from-[#FF9F0A] to-[#FFB547] h-1.5 rounded-full transition-all duration-500 ease-out"
                            style={{ width: `${checklistProgress}%` }}
                          />
                        </div>
                      </div>
                    )}
                  </div>
                  
                  {/* Checklist Content */}
                  <div className="p-3 space-y-2 max-h-[300px] overflow-y-auto">
                    {checklist.map((item, index) => (
                      <div key={item.id || index} className="group flex items-start gap-2 p-2 hover:bg-[#1F1F21] rounded-md transition-colors">
                        <input
                          type="checkbox"
                          checked={item.completed || false}
                          onChange={() => toggleChecklistItem(item.id || index.toString())}
                          className="w-4 h-4 rounded border-[#3A3A3C] bg-[#2A2A2C] text-[#FF9F0A] mt-0.5 focus:ring-[#FF9F0A] focus:ring-1"
                        />
                        <div className="flex-1 min-w-0">
                          <span className={cn(
                            "text-[13px] block",
                            item.completed 
                              ? "line-through text-white/50" 
                              : "text-white/80"
                          )}>
                            {item.text}
                          </span>
                        </div>
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => removeChecklistItem(item.id || index.toString())}
                          className="opacity-0 group-hover:opacity-100 h-6 w-6 p-0 hover:bg-red-500/20 hover:text-red-400 transition-all"
                        >
                          <X className="h-3 w-3" />
                        </Button>
                      </div>
                    ))}
                    
                    {checklist.length === 0 && (
                      <div className="text-center py-4 text-white/40">
                        <CheckSquare className="h-8 w-8 mx-auto mb-2 opacity-30" />
                        <p className="text-[12px]">Nenhum item no checklist</p>
                      </div>
                    )}
                  </div>
                  
                  {/* Add New Item */}
                  <div className="border-t border-[#2A2A2C] p-3">
                    <div className="flex gap-2">
                      <Input
                        value={newChecklistItem}
                        onChange={(e) => setNewChecklistItem(e.target.value)}
                        placeholder="Adicionar novo item..."
                        onKeyDown={(e) => {
                          if (e.key === 'Enter') addChecklistItem()
                        }}
                        className="bg-[#2A2A2C] border-[#3A3A3C] text-white placeholder:text-white/40 h-8 text-[12px] rounded-md"
                      />
                      <Button 
                        size="sm" 
                        onClick={addChecklistItem} 
                        disabled={!newChecklistItem.trim()}
                        className="h-8 px-2 bg-[#FF9F0A] hover:bg-[#FFB547] text-black"
                      >
                        <Plus className="h-3.5 w-3.5" />
                      </Button>
                    </div>
                  </div>
                </div>

                {/* Comments Section */}
                <div className="bg-[#1A1A1C] border border-[#2A2A2C] rounded-lg transition-all duration-300 hover:border-[#3A3A3C]">
                  {/* Header */}
                  <div className="border-b border-[#2A2A2C] px-3 py-2">
                    <div className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-[#7C8CF8] rounded-full"></div>
                      <label className="text-[12px] font-medium text-white/90">Comentários</label>
                      <span className="text-[10px] text-white/50">({task.comments?.length || 0})</span>
                    </div>
                  </div>
                  
                  {/* Comments List */}
                  <div className="p-3 space-y-3 max-h-[250px] overflow-y-auto">
                    {task.comments?.map((comment: any) => (
                      <div key={comment.id} className="flex gap-2 p-2 hover:bg-[#1F1F21] rounded-md transition-colors">
                        <Avatar className="h-6 w-6 flex-shrink-0 border border-[#3A3A3C]">
                          <AvatarImage src={comment.user?.avatar_url || "/minimal-avatar.png"} />
                          <AvatarFallback className="text-[10px] bg-[#2A2A2C] text-white/70">
                            {comment.user?.name?.charAt(0).toUpperCase() || 'U'}
                          </AvatarFallback>
                        </Avatar>
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center gap-2 mb-1">
                            <span className="text-[11px] font-medium text-white/80">
                              {comment.user?.name || 'Usuário'}
                            </span>
                            <span className="text-[10px] text-white/50">
                              {formatDateTime(comment.created_at)}
                            </span>
                          </div>
                          <p className="text-[12px] text-white/70 leading-relaxed">{comment.content}</p>
                        </div>
                      </div>
                    )) || (
                      <div className="text-center py-6 text-white/40">
                        <MessageCircle className="h-8 w-8 mx-auto mb-2 opacity-30" />
                        <p className="text-[12px]">Nenhum comentário ainda</p>
                      </div>
                    )}
                  </div>
                  
                  {/* Add Comment */}
                  <div className="border-t border-[#2A2A2C] p-3">
                    <div className="flex gap-2">
                      <Input
                        value={newComment}
                        onChange={(e) => setNewComment(e.target.value)}
                        placeholder="Adicionar comentário..."
                        onKeyDown={(e) => {
                          if (e.key === 'Enter' && !e.shiftKey) {
                            e.preventDefault()
                            handleAddComment()
                          }
                        }}
                        className="bg-[#2A2A2C] border-[#3A3A3C] text-white placeholder:text-white/40 h-8 text-[12px] rounded-md"
                      />
                      <Button 
                        size="sm" 
                        onClick={handleAddComment}
                        disabled={!newComment.trim() || isSubmittingComment}
                        className="h-8 px-3 bg-[#7C8CF8] hover:bg-[#8B9CFF] text-white"
                      >
                        {isSubmittingComment ? '...' : 'Enviar'}
                      </Button>
                    </div>
                  </div>
                </div>

                {/* Files Section */}
                <div className="bg-[#1A1A1C] border border-[#2A2A2C] rounded-lg transition-all duration-300 hover:border-[#3A3A3C]">
                  <div className="border-b border-[#2A2A2C] px-3 py-2">
                    <div className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-[#34C759] rounded-full"></div>
                      <label className="text-[12px] font-medium text-white/90">Anexos</label>
                      <span className="text-[10px] text-white/50">({task.files?.length || 0})</span>
                    </div>
                  </div>
                  
                  <div className="p-3">
                    <div className="space-y-2 mb-3">
                      {task.files?.map((file: any) => (
                        <div key={file.id} className="flex items-center justify-between p-2 bg-[#1F1F21] rounded-md hover:bg-[#252527] transition-colors">
                          <span className="text-[12px] text-white/80 truncate flex-1">{file.name}</span>
                          <div className="flex gap-1 ml-2">
                            <Button size="sm" variant="ghost" className="h-6 w-6 p-0 hover:bg-blue-500/20 hover:text-blue-400">
                              <Download className="h-3 w-3" />
                            </Button>
                            <Button size="sm" variant="ghost" className="h-6 w-6 p-0 hover:bg-red-500/20 hover:text-red-400">
                              <Trash2 className="h-3 w-3" />
                            </Button>
                          </div>
                        </div>
                      )) || (
                        <div className="text-center py-4 text-white/40">
                          <Paperclip className="h-8 w-8 mx-auto mb-2 opacity-30" />
                          <p className="text-[12px]">Nenhum arquivo anexado</p>
                        </div>
                      )}
                    </div>
                    
                    <Button size="sm" variant="outline" className="w-full h-8 border-[#3A3A3C] text-white/70 hover:bg-[#2A2A2C]">
                      <Upload className="h-3.5 w-3.5 mr-2" />
                      Adicionar Arquivo
                    </Button>
                  </div>
                </div>

                {/* Metadata */}
                <div className="bg-[#1A1A1C] border border-[#2A2A2C] rounded-lg p-3">
                  <div className="space-y-2 text-[10px] text-white/50">
                    <div className="flex justify-between">
                      <span>Criado:</span>
                      <span>{formatDateTime(task.created_at)}</span>
                    </div>
                    {task.updated_at !== task.created_at && (
                      <div className="flex justify-between">
                        <span>Atualizado:</span>
                        <span>{formatDateTime(task.updated_at)}</span>
                      </div>
                    )}
                    <div className="flex justify-between">
                      <span>ID:</span>
                      <span className="font-mono">{task.id.slice(0, 8)}...</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  )
}